package com.ekek.tfthobmodule.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COOKER_DATA_TABLE".
*/
public class CookerDataTableDao extends AbstractDao<CookerDataTable, Long> {

    public static final String TABLENAME = "COOKER_DATA_TABLE";

    /**
     * Properties of entity CookerDataTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CookerID = new Property(1, int.class, "cookerID", false, "CookerID");
        public final static Property WorkMode = new Property(2, int.class, "workMode", false, "WorkMode");
        public final static Property HardwareWorkMode = new Property(3, int.class, "hardwareWorkMode", false, "HardwareWorkMode");
        public final static Property TempMode = new Property(4, int.class, "tempMode", false, "TempMode");
        public final static Property FireValue = new Property(5, int.class, "fireValue", false, "FireValue");
        public final static Property TempValue = new Property(6, int.class, "tempValue", false, "TempValue");
        public final static Property NtcTempValue = new Property(7, int.class, "ntcTempValue", false, "NTCTempValue");
        public final static Property RemainHourValue = new Property(8, int.class, "remainHourValue", false, "RemainHourValue");
        public final static Property RemainMinuteValue = new Property(9, int.class, "remainMinuteValue", false, "RemainMinuteValue");
        public final static Property RemainSecondValue = new Property(10, int.class, "remainSecondValue", false, "RemainSecondValue");
        public final static Property TempIndicatorResID = new Property(11, int.class, "tempIndicatorResID", false, "TempIndicatorResID");
        public final static Property RecipesResID = new Property(12, int.class, "recipesResID", false, "RecipesResID");
        public final static Property HighTempFlag = new Property(13, boolean.class, "highTempFlag", false, "HighTempFlag");
        public final static Property PanFlag = new Property(14, boolean.class, "panFlag", false, "PanFlag");
        public final static Property ErrorMessage = new Property(15, String.class, "errorMessage", false, "ErrorMessage");
        public final static Property PowerOnFlag = new Property(16, boolean.class, "powerOnFlag", false, "PowerOnFlag");
        public final static Property RecoverFlag = new Property(17, boolean.class, "recoverFlag", false, "RecoverFlag");
        public final static Property SaveWorkMode = new Property(18, int.class, "saveWorkMode", false, "SaveWorkMode");
        public final static Property SaveHardwareWorkMode = new Property(19, int.class, "saveHardwareWorkMode", false, "SaveHardwareWorkMode");
        public final static Property SaveTempMode = new Property(20, int.class, "saveTempMode", false, "SaveTempMode");
        public final static Property SaveFireValue = new Property(21, int.class, "saveFireValue", false, "SaveFireValue");
        public final static Property SaveTempValue = new Property(22, int.class, "saveTempValue", false, "SaveTempValue");
        public final static Property SaveRemainHourValue = new Property(23, int.class, "saveRemainHourValue", false, "SaveRemainHourValue");
        public final static Property SaveRemainMinuteValue = new Property(24, int.class, "saveRemainMinuteValue", false, "SaveRemainMinuteValue");
        public final static Property SaveRemainSecondValue = new Property(25, int.class, "saveRemainSecondValue", false, "SaveRemainSecondValue");
        public final static Property SaveTempIndicatorResID = new Property(26, int.class, "saveTempIndicatorResID", false, "SaveTempIndicatorResID");
        public final static Property SaveRecipesResID = new Property(27, int.class, "saveRecipesResID", false, "SaveRecipesResID");
        public final static Property SaveHighTempFlag = new Property(28, boolean.class, "saveHighTempFlag", false, "SaveHighTempFlag");
        public final static Property SavePanFlag = new Property(29, boolean.class, "savePanFlag", false, "SavePanFlag");
        public final static Property SaveErrorMessage = new Property(30, String.class, "saveErrorMessage", false, "SaveErrorMessage");
        public final static Property SavePowerOnFlag = new Property(31, boolean.class, "savePowerOnFlag", false, "SavePowerOnFlag");
        public final static Property SaveRecoverFlag = new Property(32, boolean.class, "saveRecoverFlag", false, "SaveRecoverFlag");
        public final static Property SettingTempMode = new Property(33, int.class, "settingTempMode", false, "SettingTempMode");
        public final static Property SettingFireValue = new Property(34, int.class, "settingFireValue", false, "SettingFireValue");
        public final static Property SettingtempValue = new Property(35, int.class, "settingtempValue", false, "SettingTempValue");
        public final static Property SettingHourValue = new Property(36, int.class, "settingHourValue", false, "SettingHourValue");
        public final static Property SettingMinuteValue = new Property(37, int.class, "settingMinuteValue", false, "SettingMinuteValue");
        public final static Property SettingSecondValue = new Property(38, int.class, "settingSecondValue", false, "SettingSecondValue");
        public final static Property SettingtempIndicatorResID = new Property(39, int.class, "settingtempIndicatorResID", false, "SettingTempIndicatorResID");
        public final static Property SettingrecipesResID = new Property(40, int.class, "settingrecipesResID", false, "SettingRecipesResID");
        public final static Property Reserve = new Property(41, String.class, "reserve", false, "Reserve");
    }


    public CookerDataTableDao(DaoConfig config) {
        super(config);
    }
    
    public CookerDataTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COOKER_DATA_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CookerID\" INTEGER NOT NULL ," + // 1: cookerID
                "\"WorkMode\" INTEGER NOT NULL ," + // 2: workMode
                "\"HardwareWorkMode\" INTEGER NOT NULL ," + // 3: hardwareWorkMode
                "\"TempMode\" INTEGER NOT NULL ," + // 4: tempMode
                "\"FireValue\" INTEGER NOT NULL ," + // 5: fireValue
                "\"TempValue\" INTEGER NOT NULL ," + // 6: tempValue
                "\"NTCTempValue\" INTEGER NOT NULL ," + // 7: ntcTempValue
                "\"RemainHourValue\" INTEGER NOT NULL ," + // 8: remainHourValue
                "\"RemainMinuteValue\" INTEGER NOT NULL ," + // 9: remainMinuteValue
                "\"RemainSecondValue\" INTEGER NOT NULL ," + // 10: remainSecondValue
                "\"TempIndicatorResID\" INTEGER NOT NULL ," + // 11: tempIndicatorResID
                "\"RecipesResID\" INTEGER NOT NULL ," + // 12: recipesResID
                "\"HighTempFlag\" INTEGER NOT NULL ," + // 13: highTempFlag
                "\"PanFlag\" INTEGER NOT NULL ," + // 14: panFlag
                "\"ErrorMessage\" TEXT," + // 15: errorMessage
                "\"PowerOnFlag\" INTEGER NOT NULL ," + // 16: powerOnFlag
                "\"RecoverFlag\" INTEGER NOT NULL ," + // 17: recoverFlag
                "\"SaveWorkMode\" INTEGER NOT NULL ," + // 18: saveWorkMode
                "\"SaveHardwareWorkMode\" INTEGER NOT NULL ," + // 19: saveHardwareWorkMode
                "\"SaveTempMode\" INTEGER NOT NULL ," + // 20: saveTempMode
                "\"SaveFireValue\" INTEGER NOT NULL ," + // 21: saveFireValue
                "\"SaveTempValue\" INTEGER NOT NULL ," + // 22: saveTempValue
                "\"SaveRemainHourValue\" INTEGER NOT NULL ," + // 23: saveRemainHourValue
                "\"SaveRemainMinuteValue\" INTEGER NOT NULL ," + // 24: saveRemainMinuteValue
                "\"SaveRemainSecondValue\" INTEGER NOT NULL ," + // 25: saveRemainSecondValue
                "\"SaveTempIndicatorResID\" INTEGER NOT NULL ," + // 26: saveTempIndicatorResID
                "\"SaveRecipesResID\" INTEGER NOT NULL ," + // 27: saveRecipesResID
                "\"SaveHighTempFlag\" INTEGER NOT NULL ," + // 28: saveHighTempFlag
                "\"SavePanFlag\" INTEGER NOT NULL ," + // 29: savePanFlag
                "\"SaveErrorMessage\" TEXT," + // 30: saveErrorMessage
                "\"SavePowerOnFlag\" INTEGER NOT NULL ," + // 31: savePowerOnFlag
                "\"SaveRecoverFlag\" INTEGER NOT NULL ," + // 32: saveRecoverFlag
                "\"SettingTempMode\" INTEGER NOT NULL ," + // 33: settingTempMode
                "\"SettingFireValue\" INTEGER NOT NULL ," + // 34: settingFireValue
                "\"SettingTempValue\" INTEGER NOT NULL ," + // 35: settingtempValue
                "\"SettingHourValue\" INTEGER NOT NULL ," + // 36: settingHourValue
                "\"SettingMinuteValue\" INTEGER NOT NULL ," + // 37: settingMinuteValue
                "\"SettingSecondValue\" INTEGER NOT NULL ," + // 38: settingSecondValue
                "\"SettingTempIndicatorResID\" INTEGER NOT NULL ," + // 39: settingtempIndicatorResID
                "\"SettingRecipesResID\" INTEGER NOT NULL ," + // 40: settingrecipesResID
                "\"Reserve\" TEXT);"); // 41: reserve
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COOKER_DATA_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CookerDataTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCookerID());
        stmt.bindLong(3, entity.getWorkMode());
        stmt.bindLong(4, entity.getHardwareWorkMode());
        stmt.bindLong(5, entity.getTempMode());
        stmt.bindLong(6, entity.getFireValue());
        stmt.bindLong(7, entity.getTempValue());
        stmt.bindLong(8, entity.getNtcTempValue());
        stmt.bindLong(9, entity.getRemainHourValue());
        stmt.bindLong(10, entity.getRemainMinuteValue());
        stmt.bindLong(11, entity.getRemainSecondValue());
        stmt.bindLong(12, entity.getTempIndicatorResID());
        stmt.bindLong(13, entity.getRecipesResID());
        stmt.bindLong(14, entity.getHighTempFlag() ? 1L: 0L);
        stmt.bindLong(15, entity.getPanFlag() ? 1L: 0L);
 
        String errorMessage = entity.getErrorMessage();
        if (errorMessage != null) {
            stmt.bindString(16, errorMessage);
        }
        stmt.bindLong(17, entity.getPowerOnFlag() ? 1L: 0L);
        stmt.bindLong(18, entity.getRecoverFlag() ? 1L: 0L);
        stmt.bindLong(19, entity.getSaveWorkMode());
        stmt.bindLong(20, entity.getSaveHardwareWorkMode());
        stmt.bindLong(21, entity.getSaveTempMode());
        stmt.bindLong(22, entity.getSaveFireValue());
        stmt.bindLong(23, entity.getSaveTempValue());
        stmt.bindLong(24, entity.getSaveRemainHourValue());
        stmt.bindLong(25, entity.getSaveRemainMinuteValue());
        stmt.bindLong(26, entity.getSaveRemainSecondValue());
        stmt.bindLong(27, entity.getSaveTempIndicatorResID());
        stmt.bindLong(28, entity.getSaveRecipesResID());
        stmt.bindLong(29, entity.getSaveHighTempFlag() ? 1L: 0L);
        stmt.bindLong(30, entity.getSavePanFlag() ? 1L: 0L);
 
        String saveErrorMessage = entity.getSaveErrorMessage();
        if (saveErrorMessage != null) {
            stmt.bindString(31, saveErrorMessage);
        }
        stmt.bindLong(32, entity.getSavePowerOnFlag() ? 1L: 0L);
        stmt.bindLong(33, entity.getSaveRecoverFlag() ? 1L: 0L);
        stmt.bindLong(34, entity.getSettingTempMode());
        stmt.bindLong(35, entity.getSettingFireValue());
        stmt.bindLong(36, entity.getSettingtempValue());
        stmt.bindLong(37, entity.getSettingHourValue());
        stmt.bindLong(38, entity.getSettingMinuteValue());
        stmt.bindLong(39, entity.getSettingSecondValue());
        stmt.bindLong(40, entity.getSettingtempIndicatorResID());
        stmt.bindLong(41, entity.getSettingrecipesResID());
 
        String reserve = entity.getReserve();
        if (reserve != null) {
            stmt.bindString(42, reserve);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CookerDataTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCookerID());
        stmt.bindLong(3, entity.getWorkMode());
        stmt.bindLong(4, entity.getHardwareWorkMode());
        stmt.bindLong(5, entity.getTempMode());
        stmt.bindLong(6, entity.getFireValue());
        stmt.bindLong(7, entity.getTempValue());
        stmt.bindLong(8, entity.getNtcTempValue());
        stmt.bindLong(9, entity.getRemainHourValue());
        stmt.bindLong(10, entity.getRemainMinuteValue());
        stmt.bindLong(11, entity.getRemainSecondValue());
        stmt.bindLong(12, entity.getTempIndicatorResID());
        stmt.bindLong(13, entity.getRecipesResID());
        stmt.bindLong(14, entity.getHighTempFlag() ? 1L: 0L);
        stmt.bindLong(15, entity.getPanFlag() ? 1L: 0L);
 
        String errorMessage = entity.getErrorMessage();
        if (errorMessage != null) {
            stmt.bindString(16, errorMessage);
        }
        stmt.bindLong(17, entity.getPowerOnFlag() ? 1L: 0L);
        stmt.bindLong(18, entity.getRecoverFlag() ? 1L: 0L);
        stmt.bindLong(19, entity.getSaveWorkMode());
        stmt.bindLong(20, entity.getSaveHardwareWorkMode());
        stmt.bindLong(21, entity.getSaveTempMode());
        stmt.bindLong(22, entity.getSaveFireValue());
        stmt.bindLong(23, entity.getSaveTempValue());
        stmt.bindLong(24, entity.getSaveRemainHourValue());
        stmt.bindLong(25, entity.getSaveRemainMinuteValue());
        stmt.bindLong(26, entity.getSaveRemainSecondValue());
        stmt.bindLong(27, entity.getSaveTempIndicatorResID());
        stmt.bindLong(28, entity.getSaveRecipesResID());
        stmt.bindLong(29, entity.getSaveHighTempFlag() ? 1L: 0L);
        stmt.bindLong(30, entity.getSavePanFlag() ? 1L: 0L);
 
        String saveErrorMessage = entity.getSaveErrorMessage();
        if (saveErrorMessage != null) {
            stmt.bindString(31, saveErrorMessage);
        }
        stmt.bindLong(32, entity.getSavePowerOnFlag() ? 1L: 0L);
        stmt.bindLong(33, entity.getSaveRecoverFlag() ? 1L: 0L);
        stmt.bindLong(34, entity.getSettingTempMode());
        stmt.bindLong(35, entity.getSettingFireValue());
        stmt.bindLong(36, entity.getSettingtempValue());
        stmt.bindLong(37, entity.getSettingHourValue());
        stmt.bindLong(38, entity.getSettingMinuteValue());
        stmt.bindLong(39, entity.getSettingSecondValue());
        stmt.bindLong(40, entity.getSettingtempIndicatorResID());
        stmt.bindLong(41, entity.getSettingrecipesResID());
 
        String reserve = entity.getReserve();
        if (reserve != null) {
            stmt.bindString(42, reserve);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CookerDataTable readEntity(Cursor cursor, int offset) {
        CookerDataTable entity = new CookerDataTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // cookerID
            cursor.getInt(offset + 2), // workMode
            cursor.getInt(offset + 3), // hardwareWorkMode
            cursor.getInt(offset + 4), // tempMode
            cursor.getInt(offset + 5), // fireValue
            cursor.getInt(offset + 6), // tempValue
            cursor.getInt(offset + 7), // ntcTempValue
            cursor.getInt(offset + 8), // remainHourValue
            cursor.getInt(offset + 9), // remainMinuteValue
            cursor.getInt(offset + 10), // remainSecondValue
            cursor.getInt(offset + 11), // tempIndicatorResID
            cursor.getInt(offset + 12), // recipesResID
            cursor.getShort(offset + 13) != 0, // highTempFlag
            cursor.getShort(offset + 14) != 0, // panFlag
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // errorMessage
            cursor.getShort(offset + 16) != 0, // powerOnFlag
            cursor.getShort(offset + 17) != 0, // recoverFlag
            cursor.getInt(offset + 18), // saveWorkMode
            cursor.getInt(offset + 19), // saveHardwareWorkMode
            cursor.getInt(offset + 20), // saveTempMode
            cursor.getInt(offset + 21), // saveFireValue
            cursor.getInt(offset + 22), // saveTempValue
            cursor.getInt(offset + 23), // saveRemainHourValue
            cursor.getInt(offset + 24), // saveRemainMinuteValue
            cursor.getInt(offset + 25), // saveRemainSecondValue
            cursor.getInt(offset + 26), // saveTempIndicatorResID
            cursor.getInt(offset + 27), // saveRecipesResID
            cursor.getShort(offset + 28) != 0, // saveHighTempFlag
            cursor.getShort(offset + 29) != 0, // savePanFlag
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // saveErrorMessage
            cursor.getShort(offset + 31) != 0, // savePowerOnFlag
            cursor.getShort(offset + 32) != 0, // saveRecoverFlag
            cursor.getInt(offset + 33), // settingTempMode
            cursor.getInt(offset + 34), // settingFireValue
            cursor.getInt(offset + 35), // settingtempValue
            cursor.getInt(offset + 36), // settingHourValue
            cursor.getInt(offset + 37), // settingMinuteValue
            cursor.getInt(offset + 38), // settingSecondValue
            cursor.getInt(offset + 39), // settingtempIndicatorResID
            cursor.getInt(offset + 40), // settingrecipesResID
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41) // reserve
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CookerDataTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCookerID(cursor.getInt(offset + 1));
        entity.setWorkMode(cursor.getInt(offset + 2));
        entity.setHardwareWorkMode(cursor.getInt(offset + 3));
        entity.setTempMode(cursor.getInt(offset + 4));
        entity.setFireValue(cursor.getInt(offset + 5));
        entity.setTempValue(cursor.getInt(offset + 6));
        entity.setNtcTempValue(cursor.getInt(offset + 7));
        entity.setRemainHourValue(cursor.getInt(offset + 8));
        entity.setRemainMinuteValue(cursor.getInt(offset + 9));
        entity.setRemainSecondValue(cursor.getInt(offset + 10));
        entity.setTempIndicatorResID(cursor.getInt(offset + 11));
        entity.setRecipesResID(cursor.getInt(offset + 12));
        entity.setHighTempFlag(cursor.getShort(offset + 13) != 0);
        entity.setPanFlag(cursor.getShort(offset + 14) != 0);
        entity.setErrorMessage(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPowerOnFlag(cursor.getShort(offset + 16) != 0);
        entity.setRecoverFlag(cursor.getShort(offset + 17) != 0);
        entity.setSaveWorkMode(cursor.getInt(offset + 18));
        entity.setSaveHardwareWorkMode(cursor.getInt(offset + 19));
        entity.setSaveTempMode(cursor.getInt(offset + 20));
        entity.setSaveFireValue(cursor.getInt(offset + 21));
        entity.setSaveTempValue(cursor.getInt(offset + 22));
        entity.setSaveRemainHourValue(cursor.getInt(offset + 23));
        entity.setSaveRemainMinuteValue(cursor.getInt(offset + 24));
        entity.setSaveRemainSecondValue(cursor.getInt(offset + 25));
        entity.setSaveTempIndicatorResID(cursor.getInt(offset + 26));
        entity.setSaveRecipesResID(cursor.getInt(offset + 27));
        entity.setSaveHighTempFlag(cursor.getShort(offset + 28) != 0);
        entity.setSavePanFlag(cursor.getShort(offset + 29) != 0);
        entity.setSaveErrorMessage(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setSavePowerOnFlag(cursor.getShort(offset + 31) != 0);
        entity.setSaveRecoverFlag(cursor.getShort(offset + 32) != 0);
        entity.setSettingTempMode(cursor.getInt(offset + 33));
        entity.setSettingFireValue(cursor.getInt(offset + 34));
        entity.setSettingtempValue(cursor.getInt(offset + 35));
        entity.setSettingHourValue(cursor.getInt(offset + 36));
        entity.setSettingMinuteValue(cursor.getInt(offset + 37));
        entity.setSettingSecondValue(cursor.getInt(offset + 38));
        entity.setSettingtempIndicatorResID(cursor.getInt(offset + 39));
        entity.setSettingrecipesResID(cursor.getInt(offset + 40));
        entity.setReserve(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CookerDataTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CookerDataTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CookerDataTable entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
