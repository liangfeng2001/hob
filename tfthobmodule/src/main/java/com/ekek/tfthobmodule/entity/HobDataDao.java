package com.ekek.tfthobmodule.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOB_DATA".
*/
public class HobDataDao extends AbstractDao<HobData, Long> {

    public static final String TABLENAME = "HOB_DATA";

    /**
     * Properties of entity HobData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CookerID = new Property(1, int.class, "cookerID", false, "cooker_id");
        public final static Property CookerMode = new Property(2, int.class, "cookerMode", false, "cooker_mode");
        public final static Property CookerGear = new Property(3, int.class, "cookerGear", false, "cooker_gear");
        public final static Property CookerTemp = new Property(4, int.class, "cookerTemp", false, "cooker_temp");
        public final static Property Reserve = new Property(5, int.class, "reserve", false, "reserve");
    }


    public HobDataDao(DaoConfig config) {
        super(config);
    }
    
    public HobDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOB_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"cooker_id\" INTEGER NOT NULL ," + // 1: cookerID
                "\"cooker_mode\" INTEGER NOT NULL ," + // 2: cookerMode
                "\"cooker_gear\" INTEGER NOT NULL ," + // 3: cookerGear
                "\"cooker_temp\" INTEGER NOT NULL ," + // 4: cookerTemp
                "\"reserve\" INTEGER NOT NULL );"); // 5: reserve
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOB_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HobData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCookerID());
        stmt.bindLong(3, entity.getCookerMode());
        stmt.bindLong(4, entity.getCookerGear());
        stmt.bindLong(5, entity.getCookerTemp());
        stmt.bindLong(6, entity.getReserve());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HobData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCookerID());
        stmt.bindLong(3, entity.getCookerMode());
        stmt.bindLong(4, entity.getCookerGear());
        stmt.bindLong(5, entity.getCookerTemp());
        stmt.bindLong(6, entity.getReserve());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HobData readEntity(Cursor cursor, int offset) {
        HobData entity = new HobData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // cookerID
            cursor.getInt(offset + 2), // cookerMode
            cursor.getInt(offset + 3), // cookerGear
            cursor.getInt(offset + 4), // cookerTemp
            cursor.getInt(offset + 5) // reserve
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HobData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCookerID(cursor.getInt(offset + 1));
        entity.setCookerMode(cursor.getInt(offset + 2));
        entity.setCookerGear(cursor.getInt(offset + 3));
        entity.setCookerTemp(cursor.getInt(offset + 4));
        entity.setReserve(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HobData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HobData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HobData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
