package com.ekek.tfthobmodule.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MY_RECIPES_TABLE".
*/
public class MyRecipesTableDao extends AbstractDao<MyRecipesTable, Long> {

    public static final String TABLENAME = "MY_RECIPES_TABLE";

    /**
     * Properties of entity MyRecipesTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "Name");
        public final static Property TempValue = new Property(2, int.class, "tempValue", false, "TempValue");
        public final static Property Decription = new Property(3, String.class, "decription", false, "Decription");
        public final static Property HourValue = new Property(4, int.class, "hourValue", false, "HourValue");
        public final static Property MinuteValue = new Property(5, int.class, "minuteValue", false, "MinuteValue");
        public final static Property SecondValue = new Property(6, int.class, "secondValue", false, "SecondValue");
        public final static Property Reserve = new Property(7, String.class, "reserve", false, "Reserve");
    }


    public MyRecipesTableDao(DaoConfig config) {
        super(config);
    }
    
    public MyRecipesTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_RECIPES_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"Name\" TEXT," + // 1: name
                "\"TempValue\" INTEGER NOT NULL ," + // 2: tempValue
                "\"Decription\" TEXT," + // 3: decription
                "\"HourValue\" INTEGER NOT NULL ," + // 4: hourValue
                "\"MinuteValue\" INTEGER NOT NULL ," + // 5: minuteValue
                "\"SecondValue\" INTEGER NOT NULL ," + // 6: secondValue
                "\"Reserve\" TEXT);"); // 7: reserve
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_RECIPES_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MyRecipesTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getTempValue());
 
        String decription = entity.getDecription();
        if (decription != null) {
            stmt.bindString(4, decription);
        }
        stmt.bindLong(5, entity.getHourValue());
        stmt.bindLong(6, entity.getMinuteValue());
        stmt.bindLong(7, entity.getSecondValue());
 
        String reserve = entity.getReserve();
        if (reserve != null) {
            stmt.bindString(8, reserve);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MyRecipesTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getTempValue());
 
        String decription = entity.getDecription();
        if (decription != null) {
            stmt.bindString(4, decription);
        }
        stmt.bindLong(5, entity.getHourValue());
        stmt.bindLong(6, entity.getMinuteValue());
        stmt.bindLong(7, entity.getSecondValue());
 
        String reserve = entity.getReserve();
        if (reserve != null) {
            stmt.bindString(8, reserve);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MyRecipesTable readEntity(Cursor cursor, int offset) {
        MyRecipesTable entity = new MyRecipesTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // tempValue
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // decription
            cursor.getInt(offset + 4), // hourValue
            cursor.getInt(offset + 5), // minuteValue
            cursor.getInt(offset + 6), // secondValue
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // reserve
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MyRecipesTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTempValue(cursor.getInt(offset + 2));
        entity.setDecription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHourValue(cursor.getInt(offset + 4));
        entity.setMinuteValue(cursor.getInt(offset + 5));
        entity.setSecondValue(cursor.getInt(offset + 6));
        entity.setReserve(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MyRecipesTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MyRecipesTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MyRecipesTable entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
